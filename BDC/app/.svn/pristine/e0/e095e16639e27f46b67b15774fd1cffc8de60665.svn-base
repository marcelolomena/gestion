package services;
import play.api.Play.current
import play.api.db.DB;
import anorm.SqlParser._;
import models._;
import anorm._
import com.typesafe.plugin._;

object AdminService {

	/**
	 * *
	 * Admin
	 */
	def findAdminProjectsByUser(uId: Integer): Seq[Project] = {
		val sqlSting = "select * from art_project_master where active =1 && pId IN (select pId from  art_user_admin_mapping where uId=" + uId + " ) order by pId desc"
		DB.withConnection { implicit connection =>
			SQL(sqlSting).as(Project.project *)
		}
	}

	def findProjectListForAdmin(uId: Integer): Seq[Project] = {
		val sqlSting = "select * from art_project_master where active =1 && pId NOT IN (select pId from  art_user_admin_mapping where uId=" + uId + " ) order by pId desc"
		DB.withConnection { implicit connection =>
			SQL(sqlSting).as(Project.project *)
		}
	}

	def deleteAdminSetting(uId: Integer) = {
		DB.withConnection { implicit connection =>
			val result = SQL(
				"Delete from  art_user_admin_mapping where uId = {uId}").on(
					'uId -> uId).executeUpdate()
		}
	}

	def saveAdminSetting(admin: AdminSetting): Int = {
		DB.withConnection { implicit connection =>
			SQL(
				"""
    		  insert into art_user_admin_mapping(uId,pId) values ({uId},{pId})
    		  """).on(
					'uId -> admin.uId,
					'pId -> admin.pId).executeUpdate()
		}
	}

	def findAdminProjects(uId: Integer, pId: Integer) = {
		val sqlSting = "select * from art_user_admin_mapping where uId=" + uId + " and  pId=" + pId
		DB.withConnection { implicit connection =>
			SQL(sqlSting).as(AdminSetting.admins.singleOpt)
		}
	}

}
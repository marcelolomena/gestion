#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var models = require("../models")
var debug = require('debug')('sip:server')
var http = require('http')
var https = require('https')
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var options = {
  key: fs.readFileSync('newkey.pem'),
  cert: fs.readFileSync('cert.pem')
};

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var secure_server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync().then(function () {
  server.listen(port);
  secure_server.listen(3001);
  server.on('error', onError);
  server.on('listening', onListening);


  var io = require('socket.io').listen(secure_server);

  io.sockets.on('connection', function (socket) {

    // convenience function to log server messages on the client
    function log() {
      var array = [">>> Mensaje desde el servidor: "];
      for (var i = 0; i < arguments.length; i++) {
        array.push(arguments[i]);
      }
      socket.emit('log', array);
    }

    socket.on('message', function (message) {
      log('Got message:', message);
      // for a real app, would be room only (not broadcast)
      socket.broadcast.emit('message', message);
    });

    socket.on('create or join', function (room) {
      //var numClients = io.sockets.clients(room).length;

      var namespace = '/';

      var sala = io.nsps[namespace].adapter.rooms[room];
      var numClients = 0;
      for (var i in sala) numClients++;


      log('Sala ' + room + ' tiene ' + numClients + ' cliente(s)');
      log('Peticion para crear o unirse a una sala ' + room);

      if (numClients === 0) {
        socket.join(room);
        socket.emit('created', room);
      } //else if (numClients === 1) {
        else if (numClients <= 4) {
        io.sockets.in(room).emit('join', room);
        socket.join(room);
        socket.emit('joined', room);
      } else { // maximo dos clientes
        socket.emit('full', room);
        //io.sockets.in(room).emit('join', room);
        //socket.join(room);
        //socket.emit('joined', room);
      }
      socket.emit('emit(): client ' + socket.id + ' joined room ' + room);
      socket.broadcast.emit('broadcast(): client ' + socket.id + ' joined room ' + room);

    });

  });


});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

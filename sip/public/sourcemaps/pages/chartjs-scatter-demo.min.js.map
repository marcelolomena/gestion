{"version":3,"sources":["pages/chartjs-scatter-demo.js"],"names":["chartjsScatterDemo","init","this","bindUIActions","Chart","defaults","global","maintainAspectRatio","scatterChart","scatterMultiAxisChart","colors","red","orange","yellow","green","teal","blue","purple","gray","getColor","color","colorNames","Object","keys","randomScalingFactor","Math","random","round","randomScaling","months","self","data","datasets","label","borderColor","backgroundColor","x","y","canvas","$","getContext","Scatter","options","title","display","text","legend","xAxisID","yAxisID","responsive","hoverMode","intersect","scales","xAxes","position","gridLines","zeroLineColor","yAxes","type","id","reverse","drawOnChartArea"],"mappings":"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","file":"../../javascript/pages/chartjs-scatter-demo.min.js","sourcesContent":["// Chartjs Scatter Demo\n// =============================================================\n\nconst chartjsScatterDemo = {\n\n  init () {\n\n    this.bindUIActions()\n\n  },\n\n  bindUIActions () {\n    // turn off aspect ratio to get better mobile view\n    Chart.defaults.global.maintainAspectRatio = false\n\n    // event handlers\n    this.scatterChart()\n    this.scatterMultiAxisChart()\n  },\n\n  colors () {\n    return {\n      red: '#B76BA3',\n      orange: '#EC935E',\n      yellow: '#F7C46C',\n      green: '#A7C796',\n      teal: '#00A28A',\n      blue: '#346CB0',\n      purple: '#5F4B8B',\n      gray: '#BEC1C4'\n    }\n  },\n\n  getColor (color) {\n    return this.colors()[color]\n  },\n\n  colorNames (color) {\n    return Object.keys(this.colors())\n  },\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  },\n\n  randomScaling () {\n    return Math.round(Math.random() * 100)\n  },\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  },\n\n  scatterChart () {\n    const self = this\n    const data = {\n      datasets: [{\n        label: 'My First dataset',\n        borderColor: self.getColor('purple'),\n        backgroundColor: self.getColor('purple'),\n        data: [{\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }]\n      }, {\n        label: 'My Second dataset',\n        borderColor: self.getColor('teal'),\n        backgroundColor: self.getColor('teal'),\n        data: [{\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }]\n      }]\n    }\n\n    // init chart scatter\n    const canvas = $('#canvas-scatter')[0].getContext('2d')\n    let chart = Chart.Scatter(canvas, {\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Scatter Chart'\n        },\n        legend: {\n          display: false\n        }\n      }\n    })\n  },\n\n  scatterMultiAxisChart () {\n    const self = this\n    const data = {\n      datasets: [{\n        label: 'My First dataset',\n        xAxisID: 'x-axis-1',\n        yAxisID: 'y-axis-1',\n        borderColor: self.getColor('purple'),\n        backgroundColor: self.getColor('purple'),\n        data: [{\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }]\n      }, {\n        label: 'My Second dataset',\n        xAxisID: 'x-axis-1',\n        yAxisID: 'y-axis-2',\n        borderColor: self.getColor('teal'),\n        backgroundColor: self.getColor('teal'),\n        data: [{\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n        }]\n      }]\n    }\n\n    // init chart scatter multi axis\n    const canvas = $('#canvas-scatter-multi-axis')[0].getContext('2d')\n    let chart = Chart.Scatter(canvas, {\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        hoverMode: 'nearest',\n        intersect: true,\n        title: {\n          display: true,\n          text: 'Scatter Chart - Multi Axis'\n        },\n        scales: {\n          xAxes: [{\n            position: 'bottom',\n            gridLines: {\n              zeroLineColor: 'rgba(0,0,0,1)'\n            }\n          }],\n          yAxes: [{\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n          }, {\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'right',\n            reverse: true,\n            id: 'y-axis-2',\n            // grid line settings\n            gridLines: {\n              drawOnChartArea: false, // only want the grid lines for one axis to show up\n            },\n          }],\n        }\n      }\n    })\n  }\n}\n\n\nchartjsScatterDemo.init()\n"]}
{"version":3,"sources":["pages/chartjs-bar-demo.js"],"names":["chartjsBarDemo","init","this","bindUIActions","Chart","defaults","global","maintainAspectRatio","barChart","barHorizontal","barStacked","barStackedGroup","barMultiAxis","colors","red","orange","yellow","green","teal","blue","purple","gray","getColor","color","colorNames","Object","keys","randomScalingFactor","Math","random","round","months","self","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","canvas","$","getContext","chart","type","options","responsive","legend","display","title","text","scales","xAxes","ticks","maxRotation","maxTicksLimit","on","e","preventDefault","zero","forEach","dataset","map","update","length","month","push","index","splice","datasetIndex","pop","elements","rectangle","colorName","dsColor","newDataset","tooltips","mode","intersect","stacked","yAxes","stack","yAxisID","position","id","gridLines","drawOnChartArea"],"mappings":"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","file":"../../javascript/pages/chartjs-bar-demo.min.js","sourcesContent":["// Chartjs Bar Demo\n// =============================================================\n\nconst chartjsBarDemo = {\n\n  init () {\n\n    this.bindUIActions()\n\n  },\n\n  bindUIActions () {\n    // turn off aspect ratio to get better mobile view\n    Chart.defaults.global.maintainAspectRatio = false\n\n    // event handlers\n    this.barChart()\n    this.barHorizontal()\n    this.barStacked()\n    this.barStackedGroup()\n    this.barMultiAxis()\n  },\n\n  colors () {\n    return {\n      red: '#B76BA3',\n      orange: '#EC935E',\n      yellow: '#F7C46C',\n      green: '#A7C796',\n      teal: '#00A28A',\n      blue: '#346CB0',\n      purple: '#5F4B8B',\n      gray: '#BEC1C4'\n    }\n  },\n\n  getColor (color) {\n    return this.colors()[color]\n  },\n\n  colorNames (color) {\n    return Object.keys(this.colors())\n  },\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  },\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  },\n\n  barChart () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: self.getColor('purple'),\n        borderColor: self.getColor('purple'),\n        borderWidth: 1,\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: self.getColor('teal'),\n        borderColor: self.getColor('teal'),\n        borderWidth: 1,\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }]\n    }\n    // init chart bar\n    const canvas = $('#canvas-bar')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Bar Chart'\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              maxRotation: 0,\n              maxTicksLimit: 5\n            }\n          }]\n        }\n      }\n    })\n\n    // randomize data\n    $('#randomizeData').on('click', function (e) {\n      e.preventDefault()\n      const zero = Math.random() < 0.2 ? true : false\n      data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return zero ? 0.0 : self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add data\n    $('#addData').on('click', function (e) {\n      e.preventDefault()\n      if (data.datasets.length > 0) {\n        const month = self.months()[data.labels.length % self.months().length]\n        data.labels.push(month)\n        for (let index = 0; index < data.datasets.length; ++index) {\n          //chart.addData(self.randomScalingFactor(), index)\n          data.datasets[index].data.push(self.randomScalingFactor())\n        }\n        chart.update()\n      }\n    })\n\n    // remove data\n    $('#removeData').on('click', function (e) {\n      e.preventDefault()\n      data.labels.splice(-1, 1) // remove the label first\n      data.datasets.forEach(function (dataset, datasetIndex) {\n        dataset.data.pop()\n      })\n      chart.update()\n    })\n  },\n\n  barHorizontal () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: self.getColor('purple'),\n        borderColor: self.getColor('purple'),\n        borderWidth: 1,\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: self.getColor('teal'),\n        borderColor: self.getColor('teal'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }]\n    }\n    // init chart horizontal bar\n    const canvas = $('#canvas-horizontal-bar')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'horizontalBar',\n      data: data,\n      options: {\n        // Elements options apply to all of the options unless overridden in a dataset\n        // In this case, we are setting the border of each horizontal bar to be 2px wide\n        elements: {\n          rectangle: {\n            borderWidth: 2,\n          }\n        },\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Horizontal Bar Chart'\n        }\n      }\n    })\n\n    // randomize data\n    $('#randomizeDataHorizontalBar').on('click', function (e) {\n      e.preventDefault()\n      const zero = Math.random() < 0.2 ? true : false\n      data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return zero ? 0.0 : self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add dataset\n    $('#addDatasetHorizontalBar').on('click', function (e) {\n      e.preventDefault()\n      if (data.datasets.length <= 6) {\n        const colorName = self.colorNames()[data.datasets.length % Object.keys(self.colors()).length]\n        const dsColor = self.getColor(colorName)\n        const newDataset = {\n          label: 'Dataset ' + data.datasets.length,\n          backgroundColor: dsColor,\n          borderColor: dsColor,\n          data: []\n        }\n        for (let index = 0; index < data.labels.length; ++index) {\n          newDataset.data.push(self.randomScalingFactor())\n        }\n        data.datasets.push(newDataset)\n        chart.update()\n      }\n    })\n\n    // remove dataset\n    $('#removeDatasetHorizontalBar').on('click', function () {\n      data.datasets.splice(0, 1)\n      chart.update()\n    })\n  },\n\n  barStacked () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: self.getColor('blue'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: self.getColor('teal'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 3',\n        backgroundColor: self.getColor('purple'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }]\n    }\n\n    // init Chart Stacked Bar\n    const canvas = $('#canvas-stacked')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Stacked'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false\n        },\n        responsive: true,\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            stacked: true,\n          }],\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    })\n  },\n\n  barStackedGroup () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: self.getColor('purple'),\n        stack: 'Stack 0',\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: self.getColor('teal'),\n        stack: 'Stack 0',\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 3',\n        backgroundColor: self.getColor('teal'),\n        stack: 'Stack 1',\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }]\n    }\n    // init chart stacked group bar\n    const canvas = $('#canvas-stacked-group')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        title: {\n          display: true,\n          text: 'Stacked Group'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false\n        },\n        responsive: true,\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            stacked: true,\n          }],\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    })\n  },\n\n  barMultiAxis () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: [\n          self.getColor('purple'),\n          self.getColor('orange'),\n          self.getColor('green'),\n          self.getColor('teal'),\n          self.getColor('blue'),\n          self.getColor('red'),\n          self.getColor('purple')\n        ],\n        yAxisID: 'y-axis-1',\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: self.getColor('gray'),\n        yAxisID: 'y-axis-2',\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }]\n    }\n    const canvas = $('#canvas-multi-axis')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Multi Axis'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: true\n        },\n        scales: {\n          yAxes: [{\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n          }, {\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'right',\n            id: 'y-axis-2',\n            gridLines: {\n              drawOnChartArea: false\n            }\n          }],\n        }\n      }\n    })\n  }\n}\n\nchartjsBarDemo.init()\n"]}
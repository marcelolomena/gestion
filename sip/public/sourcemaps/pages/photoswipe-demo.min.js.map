{"version":3,"sources":["pages/photoswipe-demo.js"],"names":["photoswipeDemo","init","this","bindUIActions","initPhotoSwipeFromDOM","$","document","ready","on","e","stopPropagation","gallerySelector","onThumbnailsClick","window","event","preventDefault","returnValue","clickedListItem","closest","el","fn","parentNode","target","srcElement","tagName","toUpperCase","clickedGallery","childNodes","querySelectorAll","numChildNodes","length","nodeIndex","index","i","nodeType","openPhotoSwipe","galleryElement","disableAnimation","fromURL","pswpElement","options","items","classList","contains","thumbElements","numNodes","figureEl","linkEl","size","item","getAttribute","split","src","w","parseInt","h","children","title","innerHTML","msrc","push","parseThumbnailElements","galleryUID","getThumbBoundsFn","thumbnail","getElementsByTagName","pageYScroll","pageYOffset","documentElement","scrollTop","rect","getBoundingClientRect","x","left","y","top","width","galleryPIDs","j","pid","isNaN","showAnimationDuration","PhotoSwipe","PhotoSwipeUI_Default","galleryElements","l","setAttribute","onclick","hashData","hash","location","substring","params","vars","pair","gid","photoswipeParseHash"],"mappings":"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","file":"../../javascript/pages/photoswipe-demo.min.js","sourcesContent":["// Photoswipe Demo\n// =============================================================\n\nconst photoswipeDemo = {\n\n  init () {\n\n    this.bindUIActions()\n\n  },\n\n  bindUIActions () {\n\n    // event handlers\n    this.initPhotoSwipeFromDOM('.pswp-gallery')\n\n    // handle propagation for another 'a' tags\n    $(document).ready(function () {\n      $('.figure-action > a').on('click', function (e){\n        e.stopPropagation()\n      })\n    })\n  },\n\n  initPhotoSwipeFromDOM (gallerySelector) {\n    // parse slide data (url, title, size ...) from DOM elements\n    // (children of gallerySelector)\n    const parseThumbnailElements = function (el) {\n      let thumbElements = el.childNodes\n      let numNodes = thumbElements.length\n      let items = []\n      let figureEl\n      let linkEl\n      let size\n      let item\n\n      for(let i = 0; i < numNodes; i++) {\n        // <figure> element\n        figureEl = thumbElements[i]\n        // include only element nodes\n        if(figureEl.nodeType !== 1) {\n          continue\n        }\n        // <a> element\n        linkEl = figureEl.querySelectorAll('.img-link')[0]\n        size = linkEl.getAttribute('data-size').split('x')\n        // create slide object\n        item = {\n          src: linkEl.getAttribute('href'),\n          w: parseInt(size[0], 10),\n          h: parseInt(size[1], 10)\n        }\n        // img caption content\n        if(linkEl.children.length > 1) {\n          item.title = linkEl.querySelectorAll('.img-caption')[0].innerHTML\n        }\n        // <img> thumbnail element, retrieving thumbnail url\n        if(linkEl.children.length > 0) {\n          item.msrc = figureEl.querySelectorAll('img')[0].getAttribute('src')\n        }\n        // save link to element for getThumbBoundsFn\n        item.el = figureEl\n        items.push(item)\n      }\n\n      return items\n    };\n\n    // find nearest parent element\n    const closest = function closest (el, fn) {\n      return el && (fn(el) ? el : closest(el.parentNode, fn))\n    };\n\n    // triggers when user clicks on thumbnail\n    const onThumbnailsClick = function (e) {\n      e = e || window.event\n      e.preventDefault ? e.preventDefault() : e.returnValue = false\n\n      const eTarget = e.target || e.srcElement\n\n      // find root element of slide\n      const clickedListItem = closest(eTarget, function (el) {\n        return (el.tagName && el.tagName.toUpperCase() === 'FIGURE')\n      })\n\n      if(!clickedListItem) {\n        return\n      }\n\n      // find index of clicked item by looping through all child nodes\n      // alternatively, you may define index via data- attribute\n      let clickedGallery = clickedListItem.parentNode\n      let childNodes = clickedListItem.parentNode.parentNode.parentNode.querySelectorAll('.figure')\n      let numChildNodes = childNodes.length\n      let nodeIndex = 0\n      let index\n\n      for (let i = 0; i < numChildNodes; i++) {\n        if(childNodes[i].nodeType !== 1) {\n          continue\n        }\n\n        if(childNodes[i] === clickedListItem) {\n          index = nodeIndex\n          break\n        }\n        nodeIndex++\n      }\n\n      if(index >= 0) {\n        // open PhotoSwipe if valid index found\n        openPhotoSwipe( index, clickedGallery )\n      }\n      return false\n    };\n\n    // parse picture index and gallery index from URL (#&pid=1&gid=2)\n    const photoswipeParseHash = function () {\n      let hash = window.location.hash.substring(1)\n      let params = {}\n\n      if(hash.length < 5) {\n        return params\n      }\n\n      let vars = hash.split('&')\n      for (let i = 0; i < vars.length; i++) {\n        if(!vars[i]) {\n          continue\n        }\n        let pair = vars[i].split('=');\n        if(pair.length < 2) {\n          continue\n        }\n        params[pair[0]] = pair[1]\n      }\n\n      if(params.gid) {\n        params.gid = parseInt(params.gid, 10)\n      }\n\n      return params\n    }\n\n    const openPhotoSwipe = function (index, galleryElement, disableAnimation, fromURL) {\n      let pswpElement = document.querySelectorAll('.pswp')[0]\n      let gallery\n      let options\n      let items\n\n      // refer to galerySelector\n      galleryElement = galleryElement.classList.contains('card-figure')\n        ? galleryElement.parentNode.parentNode\n        : galleryElement\n      items = parseThumbnailElements(galleryElement)\n\n      // define options (if needed)\n      options = {\n        // define gallery index (for URL)\n        galleryUID: galleryElement.getAttribute('data-pswp-uid'),\n        getThumbBoundsFn: function (index) {\n          // See Options -> getThumbBoundsFn section of documentation for more info\n          let thumbnail = items[index].el.getElementsByTagName('img')[0] // find thumbnail\n          let pageYScroll = window.pageYOffset || document.documentElement.scrollTop\n          let rect = thumbnail.getBoundingClientRect()\n\n          return {x:rect.left, y:rect.top + pageYScroll, w:rect.width}\n        }\n      };\n\n      // PhotoSwipe opened from URL\n      if(fromURL) {\n        if(options.galleryPIDs) {\n          // parse real index when custom PIDs are used\n          // http://photoswipe.com/documentation/faq.html#custom-pid-in-url\n          for(let j = 0; j < items.length; j++) {\n            if(items[j].pid == index) {\n              options.index = j\n              break;\n            }\n          }\n        } else {\n          // in URL indexes start from 1\n          options.index = parseInt(index, 10) - 1\n        }\n      } else {\n        options.index = parseInt(index, 10)\n      }\n\n      // exit if index not found\n      if( isNaN(options.index) ) {\n        return\n      }\n\n      if(disableAnimation) {\n        options.showAnimationDuration = 0\n      }\n\n      // Pass data to PhotoSwipe and initialize it\n      gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options)\n      gallery.init()\n    }\n\n    // loop through all gallery elements and bind events\n    const galleryElements = document.querySelectorAll( gallerySelector )\n\n    for(let i = 0, l = galleryElements.length; i < l; i++) {\n      galleryElements[i].setAttribute('data-pswp-uid', i+1)\n      galleryElements[i].onclick = onThumbnailsClick\n    }\n\n    // Parse URL and open gallery if it contains #&pid=3&gid=1\n    const hashData = photoswipeParseHash();\n    if(hashData.pid && hashData.gid) {\n      openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true )\n    }\n  }\n}\n\nphotoswipeDemo.init()\n"]}
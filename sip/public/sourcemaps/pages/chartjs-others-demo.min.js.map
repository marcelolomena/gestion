{"version":3,"sources":["pages/chartjs-others-demo.js"],"names":["chartjsOtherDemo","init","this","bindUIActions","Chart","defaults","global","maintainAspectRatio","dataLabellingChart","comboBarLineChart","bubbleChart","polarAreaChart","pieChart","doughnutChart","colors","red","orange","yellow","green","teal","blue","purple","gray","getColor","color","colorNames","Object","keys","randomScalingFactor","Math","random","round","randomScaling","months","self","data","labels","datasets","type","label","backgroundColor","helpers","alpha","rgbString","borderColor","plugins","register","afterDatasetsDraw","chartInstance","easing","ctx","chart","forEach","dataset","i","id","meta","getDatasetMeta","hidden","element","index","fillStyle","font","fontString","dataString","toString","textAlign","textBaseline","position","tooltipPosition","fillText","x","y","fontSize","canvas","$","getContext","options","responsive","legend","display","title","text","borderWidth","fill","tooltips","mode","intersect","animation","duration","r","abs","scale","ticks","beginAtZero","reverse","animateRotate","animateScale","PolarArea"],"mappings":"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","file":"../../javascript/pages/chartjs-others-demo.min.js","sourcesContent":["// Chartjs Other Demo\n// =============================================================\n\nconst chartjsOtherDemo = {\n\n  init () {\n\n    this.bindUIActions()\n\n  },\n\n  bindUIActions () {\n    // turn off aspect ratio to get better mobile view\n    Chart.defaults.global.maintainAspectRatio = false\n\n    // event handlers\n    this.dataLabellingChart()\n    this.comboBarLineChart()\n    this.bubbleChart()\n    this.polarAreaChart()\n    this.pieChart()\n    this.doughnutChart()\n  },\n\n  colors () {\n    return {\n      red: '#B76BA3',\n      orange: '#EC935E',\n      yellow: '#F7C46C',\n      green: '#A7C796',\n      teal: '#00A28A',\n      blue: '#346CB0',\n      purple: '#5F4B8B',\n      gray: '#BEC1C4'\n    }\n  },\n\n  getColor (color) {\n    return this.colors()[color]\n  },\n\n  colorNames (color) {\n    return Object.keys(this.colors())\n  },\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  },\n\n  randomScaling () {\n    return Math.round(Math.random() * 100)\n  },\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  },\n\n  dataLabellingChart () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        type: 'bar',\n        label: 'Dataset 1',\n        backgroundColor: Chart.helpers.color(self.getColor('purple')).alpha(0.2).rgbString(),\n        borderColor: self.getColor('purple'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        type: 'line',\n        label: 'Dataset 2',\n        backgroundColor: Chart.helpers.color(self.getColor('green')).alpha(0.2).rgbString(),\n        borderColor: self.getColor('green'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        type: 'bar',\n        label: 'Dataset 3',\n        backgroundColor: Chart.helpers.color(self.getColor('teal')).alpha(0.2).rgbString(),\n        borderColor: self.getColor('teal'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }]\n    }\n\n    // Define a plugin to provide data labels\n    Chart.plugins.register({\n      afterDatasetsDraw: function (chartInstance, easing) {\n        // To only draw at the end of animation, check for easing === 1\n        let ctx = chartInstance.chart.ctx\n\n        chartInstance.data.datasets.forEach(function (dataset, i) {\n          // labelling only first chart\n          if (chartInstance.id > 0) {\n            return\n          }\n\n          let meta = chartInstance.getDatasetMeta(i)\n          if (!meta.hidden) {\n            meta.data.forEach(function (element, index) {\n              // Draw the text in black, with the specified font\n              ctx.fillStyle = '#686F76'\n\n              const fontSize = 12\n              const fontStyle = 'normal'\n              const fontFamily = 'inherit'\n              ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily)\n\n              // Just naively convert to string for now\n              let dataString = dataset.data[index].toString()\n\n              // Make sure alignment settings are correct\n              ctx.textAlign = 'center'\n              ctx.textBaseline = 'middle'\n\n              const padding = 5\n              const position = element.tooltipPosition()\n              ctx.fillText(dataString, position.x, position.y - (fontSize / 2) - padding)\n            })\n          }\n        })\n      }\n    })\n\n    // init chart data labelling\n    const canvas = $('#canvas-data-labelling')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Data Labelling'\n        },\n      }\n    })\n  },\n\n  comboBarLineChart () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        type: 'line',\n        label: 'Dataset 1',\n        borderColor: self.getColor('teal'),\n        borderWidth: 2,\n        fill: false,\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }, {\n        type: 'bar',\n        label: 'Dataset 2',\n        backgroundColor: self.getColor('red'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ],\n        borderColor: 'white',\n        borderWidth: 2\n      }, {\n        type: 'bar',\n        label: 'Dataset 3',\n        backgroundColor: self.getColor('purple'),\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ]\n      }]\n    }\n\n    // init chart combo bar line\n    const canvas = $('#canvas-combo-bar-line')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bar',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Combo Bar Line Chart'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: true\n        }\n      }\n    })\n  },\n\n  bubbleChart () {\n    const self = this\n    const DEFAULT_DATASET_SIZE = 7\n    const addedCount = 2\n    const data = {\n      animation: {\n        duration: 10000\n      },\n      datasets: [{\n        label: 'Dataset 1',\n        backgroundColor: Chart.helpers.color(self.getColor('purple')).alpha(0.5).rgbString(),\n        borderColor: self.getColor('purple'),\n        borderWidth: 1,\n        data: [{\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }]\n      }, {\n        label: 'Dataset 2',\n        backgroundColor: Chart.helpers.color(self.getColor('teal')).alpha(0.5).rgbString(),\n        borderColor: self.getColor('teal'),\n        borderWidth: 1,\n        data: [{\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }, {\n          x: self.randomScalingFactor(),\n          y: self.randomScalingFactor(),\n          r: Math.abs(self.randomScalingFactor()) / 5,\n        }]\n      }]\n    }\n\n    // init chart bubble\n    const canvas = $('#canvas-bubble')[0].getContext('2d')\n    let chart = new Chart(canvas, {\n      type: 'bubble',\n      data: data,\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Bubble Chart'\n        },\n        tooltips: {\n          mode: 'point'\n        }\n      }\n    })\n  },\n\n  polarAreaChart () {\n    const self = this\n    const data = {\n      data: {\n        datasets: [{\n          data: [\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n          ],\n          backgroundColor: [\n            Chart.helpers.color(self.getColor('red')).alpha(0.5).rgbString(),\n            Chart.helpers.color(self.getColor('purple')).alpha(0.5).rgbString(),\n            Chart.helpers.color(self.getColor('yellow')).alpha(0.5).rgbString(),\n            Chart.helpers.color(self.getColor('teal')).alpha(0.5).rgbString(),\n            Chart.helpers.color(self.getColor('blue')).alpha(0.5).rgbString(),\n          ],\n          label: 'My dataset' // for legend\n        }],\n        labels: [\n          'Red',\n          'Purple',\n          'Yellow',\n          'Green',\n          'Blue'\n        ]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Polar Area Chart'\n        },\n        scale: {\n          ticks: {\n            beginAtZero: true\n          },\n          reverse: false\n        },\n        animation: {\n          animateRotate: false,\n          animateScale: true\n        }\n      }\n    }\n\n    // init chart polar area\n    const canvas = $('#canvas-polar-area')[0].getContext('2d')\n    let chart = Chart.PolarArea(canvas, data)\n  },\n\n  pieChart () {\n    const self = this\n    const data = {\n      type: 'pie',\n      data: {\n        datasets: [{\n          data: [\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n          ],\n          backgroundColor: [\n            self.getColor('red'),\n            self.getColor('purple'),\n            self.getColor('yellow'),\n            self.getColor('teal'),\n            self.getColor('blue'),\n          ],\n          label: 'Dataset 1'\n        }],\n        labels: [\n          'Red',\n          'Purple',\n          'Yellow',\n          'Green',\n          'Blue'\n        ]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Pie Chart'\n        }\n      }\n    }\n\n    // init chart pie\n    const canvas = $('#canvas-pie')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  },\n\n  doughnutChart () {\n    const self = this\n    const data = {\n      type: 'doughnut',\n      data: {\n        datasets: [{\n          data: [\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n            self.randomScaling(),\n          ],\n          backgroundColor: [\n            self.getColor('red'),\n            self.getColor('purple'),\n            self.getColor('yellow'),\n            self.getColor('teal'),\n            self.getColor('blue'),\n          ],\n          label: 'Dataset 1'\n        }],\n        labels: [\n          'Red',\n          'Purple',\n          'Yellow',\n          'Green',\n          'Blue'\n        ]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Doughnut Chart'\n        },\n        animation: {\n          animateScale: true,\n          animateRotate: true\n        }\n      }\n    }\n\n    // init chart doughnut\n    const canvas = $('#canvas-doughnut')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n}\n\n\nchartjsOtherDemo.init()\n"]}
{"version":3,"sources":["pages/chartjs-line-demo.js"],"names":["chartjsLineDemo","init","this","bindUIActions","Chart","defaults","global","maintainAspectRatio","lineChart","stackedArea","lineStyles","lineStepped","lineSkipPoint","lineDifferentPointSizes","lineMultiAxis","lineInterpolation","colors","red","orange","yellow","green","teal","blue","purple","gray","getColor","color","colorNames","Object","keys","randomScalingFactor","Math","random","round","months","self","data","type","labels","datasets","label","backgroundColor","borderColor","fill","options","responsive","legend","display","title","text","tooltips","mode","intersect","hover","scales","xAxes","ticks","maxRotation","maxTicksLimit","canvas","$","getContext","chart","on","e","preventDefault","forEach","dataset","map","update","length","month","push","splice","datasetIndex","pop","position","yAxes","stacked","colorName","newColor","newDataset","index","borderDash","steppedLine","NaN","pointRadius","pointHoverRadius","yAxisID","Line","hoverMode","id","gridLines","drawOnChartArea","datapoints","cubicInterpolationMode","lineTension","suggestedMin","suggestedMax"],"mappings":"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","file":"../../javascript/pages/chartjs-line-demo.min.js","sourcesContent":["// Chartjs Line Demo\n// =============================================================\n\nconst chartjsLineDemo = {\n\n  init () {\n\n    this.bindUIActions()\n\n  },\n\n  bindUIActions () {\n    // turn off aspect ratio to get better mobile view\n    Chart.defaults.global.maintainAspectRatio = false\n\n    // event handlers\n    this.lineChart()\n    this.stackedArea()\n    this.lineStyles()\n    this.lineStepped()\n    this.lineSkipPoint()\n    this.lineDifferentPointSizes()\n    this.lineMultiAxis()\n    this.lineInterpolation()\n  },\n\n  colors () {\n    return {\n      red: '#B76BA3',\n      orange: '#EC935E',\n      yellow: '#F7C46C',\n      green: '#A7C796',\n      teal: '#00A28A',\n      blue: '#346CB0',\n      purple: '#5F4B8B',\n      gray: '#BEC1C4'\n    }\n  },\n\n  getColor (color) {\n    return this.colors()[color]\n  },\n\n  colorNames (color) {\n    return Object.keys(this.colors())\n  },\n\n  randomScalingFactor () {\n    return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100)\n  },\n\n  months () {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n  },\n\n  lineChart () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'Data 1',\n          backgroundColor: self.getColor('purple'),\n          borderColor: self.getColor('purple'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n          fill: false,\n        }, {\n          label: 'Data 2',\n          fill: false,\n          backgroundColor: self.getColor('teal'),\n          borderColor: self.getColor('teal'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Line Chart'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              maxRotation: 0,\n              maxTicksLimit: 5\n            }\n          }]\n        }\n      }\n    }\n\n    // init chart line\n    const canvas = $('#canvas-line')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n\n    // randomize data\n    $('#randomizeData').on('click', function (e) {\n      e.preventDefault()\n      data.data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add data\n    $('#addData').on('click', function (e) {\n      e.preventDefault()\n      if (data.data.datasets.length > 0) {\n        const month = self.months()[data.data.labels.length % self.months().length]\n        data.data.labels.push(month)\n        data.data.datasets.forEach(function (dataset) {\n          dataset.data.push(self.randomScalingFactor())\n        })\n        chart.update()\n      }\n    })\n\n    // remove data\n    $('#removeData').on('click', function (e) {\n      e.preventDefault()\n      data.data.labels.splice(-1, 1) // remove the label first\n      data.data.datasets.forEach(function (dataset, datasetIndex) {\n        dataset.data.pop()\n      })\n      chart.update()\n    })\n  },\n\n  stackedArea () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'Data 1',\n          borderColor: self.getColor('purple'),\n          backgroundColor: self.getColor('purple'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n        }, {\n          label: 'Data 2',\n          borderColor: self.getColor('teal'),\n          backgroundColor: self.getColor('teal'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Stacked Area'\n        },\n        tooltips: {\n          mode: 'index',\n          position: 'nearest'\n        },\n        hover: {\n          mode: 'index'\n        },\n        scales: {\n          yAxes: [{\n            stacked: true\n          }]\n        }\n      }\n    }\n\n    // init chart line stacked area\n    const canvas = $('#canvas-stacked-area')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n\n    // randomize data\n    $('#randomizeDataStackedArea').on('click', function (e) {\n      e.preventDefault()\n      data.data.datasets.forEach(function (dataset) {\n        dataset.data = dataset.data.map(function () {\n          return self.randomScalingFactor()\n        })\n      })\n      chart.update()\n    })\n\n    // add dataset\n    $('#addDatasetStackedArea').on('click', function (e) {\n      e.preventDefault()\n      if (data.data.datasets.length <= 8) {\n        const colorName = self.colorNames()[data.data.datasets.length % Object.keys(self.colors()).length]\n        const newColor = self.getColor(colorName)\n        const newDataset = {\n          label: 'Dataset ' + data.data.datasets.length,\n          borderColor: newColor,\n          backgroundColor: newColor,\n          data: [],\n        }\n        for (let index = 0; index < data.data.labels.length; ++index) {\n          newDataset.data.push(self.randomScalingFactor())\n        }\n        data.data.datasets.push(newDataset)\n        chart.update()\n      }\n    })\n\n    // remove dataset\n    $('#removeDatasetStackedArea').on('click', function (e) {\n      e.preventDefault()\n      data.data.datasets.splice(0, 1)\n      chart.update()\n    })\n  },\n\n  lineStyles () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'Unfilled',\n          fill: false,\n          backgroundColor: self.getColor('blue'),\n          borderColor: self.getColor('blue'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n        }, {\n          label: 'Dashed',\n          fill: false,\n          backgroundColor: self.getColor('teal'),\n          borderColor: self.getColor('teal'),\n          borderDash: [5, 5],\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n        }, {\n          label: 'Filled',\n          backgroundColor: self.getColor('purple'),\n          borderColor: self.getColor('purple'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n          fill: true,\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Line Styles'\n        },\n        tooltips: {\n          mode: 'index',\n          intersect: false,\n        },\n        hover: {\n          mode: 'nearest',\n          intersect: true\n        }\n      }\n    }\n    // init chart line styles\n    const canvas = $('#canvas-styles')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  },\n\n  lineStepped () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'My First dataset',\n          borderColor: self.getColor('purple'),\n          backgroundColor: self.getColor('purple'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n          fill: false,\n          steppedLine: true,\n        }, {\n          label: 'My Second dataset',\n          steppedLine: true,\n          borderColor: self.getColor('teal'),\n          backgroundColor: self.getColor('teal'),\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n          fill: false,\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Line Stepped'\n        },\n        tooltips: {\n          mode: 'index'\n        }\n      }\n    }\n    // init chart line stepped\n    const canvas = $('#canvas-stepped')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  },\n\n  lineSkipPoint () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'My First dataset',\n          borderColor: self.getColor('purple'),\n          fill: false,\n          // Skip a point in the middle\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            NaN,\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n\n        }, {\n          label: 'My Second dataset',\n          borderColor: self.getColor('teal'),\n          fill: false,\n          // Skip first and last points\n          data: [\n            NaN,\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            NaN\n          ],\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        title: {\n          display: true,\n          text: 'Skip Points'\n        },\n        tooltips: {\n          mode: 'index',\n        },\n        hover: {\n          mode: 'index'\n        }\n      }\n    }\n\n    // init chart line skip points\n    const canvas = $('#canvas-skip-points')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  },\n\n  lineDifferentPointSizes () {\n    const self = this\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        datasets: [{\n          label: 'dataset - big points',\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n          backgroundColor: self.getColor('purple'),\n          borderColor: self.getColor('purple'),\n          fill: false,\n          borderDash: [5, 5],\n          pointRadius: 15,\n          pointHoverRadius: 10,\n        }, {\n          label: 'dataset - individual point sizes',\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n          backgroundColor: self.getColor('teal'),\n          borderColor: self.getColor('teal'),\n          fill: false,\n          borderDash: [5, 5],\n          pointRadius: [2, 4, 6, 18, 0, 12, 20],\n        }, {\n          label: 'dataset - large pointHoverRadius',\n          data: [\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor(),\n            self.randomScalingFactor()\n          ],\n          backgroundColor: self.getColor('blue'),\n          borderColor: self.getColor('blue'),\n          fill: false,\n          pointHoverRadius: 30,\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          display: false\n        },\n        hover: {\n          mode: 'index'\n        },\n        title: {\n          display: true,\n          text: 'Different point sizes'\n        }\n      }\n    }\n\n    // init chart line different point sizes\n    const canvas = $('#canvas-different-point-sizes')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  },\n\n  lineMultiAxis () {\n    const self = this\n    const data = {\n      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n      datasets: [{\n        label: 'My First dataset',\n        borderColor: self.getColor('purple'),\n        backgroundColor: self.getColor('purple'),\n        fill: false,\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ],\n        yAxisID: 'y-axis-1',\n      }, {\n        label: 'My Second dataset',\n        borderColor: self.getColor('teal'),\n        backgroundColor: self.getColor('teal'),\n        fill: false,\n        data: [\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor(),\n          self.randomScalingFactor()\n        ],\n        yAxisID: 'y-axis-2'\n      }]\n    }\n\n    // init chart line multi axis\n    const canvas = $('#canvas-multi-axis')[0].getContext('2d')\n    let chart = Chart.Line(canvas, {\n      data: data,\n      options: {\n        responsive: true,\n        hoverMode: 'index',\n        stacked: false,\n        title: {\n          display: true,\n          text: 'Multi Axis'\n        },\n        scales: {\n          yAxes: [{\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'left',\n            id: 'y-axis-1',\n          }, {\n            type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n            display: true,\n            position: 'right',\n            id: 'y-axis-2',\n\n            // grid line settings\n            gridLines: {\n              drawOnChartArea: false, // only want the grid lines for one axis to show up\n            },\n          }],\n        }\n      }\n    })\n  },\n\n  lineInterpolation () {\n    const self = this\n    const datapoints = [0, 20, 20, 60, 60, 120, NaN, 180, 120, 125, 105, 110, 170]\n    const data = {\n      type: 'line',\n      data: {\n        labels: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],\n        datasets: [{\n          label: 'Monotone',\n          data: datapoints,\n          borderColor: self.getColor('purple'),\n          backgroundColor: self.getColor('purple'),\n          fill: false,\n          cubicInterpolationMode: 'monotone'\n        }, {\n          label: 'Default',\n          data: datapoints,\n          borderColor: self.getColor('blue'),\n          backgroundColor: self.getColor('blue'),\n          fill: false,\n        }, {\n          label: 'Linear',\n          data: datapoints,\n          borderColor: self.getColor('teal'),\n          backgroundColor: self.getColor('teal'),\n          fill: false,\n          lineTension: 0\n        }]\n      },\n      options: {\n        responsive: true,\n        legend: {\n          position: 'bottom'\n        },\n        title:{\n          display:true,\n          text:'Cubic interpolation mode'\n        },\n        tooltips: {\n          mode: 'index'\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              suggestedMin: -10,\n              suggestedMax: 200,\n            }\n          }]\n        }\n      }\n    }\n\n    // init chart line multi axis\n    const canvas = $('#canvas-interpolation-modes')[0].getContext('2d')\n    let chart = new Chart(canvas, data)\n  }\n}\n\n\nchartjsLineDemo.init()\n"]}